# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobufs.usermanagement_pb2 as usermanagement__pb2


class oculusUserManagementStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/usermanagement.oculusUserManagement/register',
                request_serializer=usermanagement__pb2.registraionRequest.SerializeToString,
                response_deserializer=usermanagement__pb2.registraionResponce.FromString,
                )
        self.getUser = channel.unary_unary(
                '/usermanagement.oculusUserManagement/getUser',
                request_serializer=usermanagement__pb2.userInfoRequest.SerializeToString,
                response_deserializer=usermanagement__pb2.userInfoResponce.FromString,
                )
        self.accountSettings = channel.unary_unary(
                '/usermanagement.oculusUserManagement/accountSettings',
                request_serializer=usermanagement__pb2.settingsRequest.SerializeToString,
                response_deserializer=usermanagement__pb2.settingsResponce.FromString,
                )
        self.notifications = channel.unary_unary(
                '/usermanagement.oculusUserManagement/notifications',
                request_serializer=usermanagement__pb2.notificationRequest.SerializeToString,
                response_deserializer=usermanagement__pb2.notificationResponce.FromString,
                )


class oculusUserManagementServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def accountSettings(self, request, context):
        """Change after getting account setttings details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_oculusUserManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=usermanagement__pb2.registraionRequest.FromString,
                    response_serializer=usermanagement__pb2.registraionResponce.SerializeToString,
            ),
            'getUser': grpc.unary_unary_rpc_method_handler(
                    servicer.getUser,
                    request_deserializer=usermanagement__pb2.userInfoRequest.FromString,
                    response_serializer=usermanagement__pb2.userInfoResponce.SerializeToString,
            ),
            'accountSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.accountSettings,
                    request_deserializer=usermanagement__pb2.settingsRequest.FromString,
                    response_serializer=usermanagement__pb2.settingsResponce.SerializeToString,
            ),
            'notifications': grpc.unary_unary_rpc_method_handler(
                    servicer.notifications,
                    request_deserializer=usermanagement__pb2.notificationRequest.FromString,
                    response_serializer=usermanagement__pb2.notificationResponce.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'usermanagement.oculusUserManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class oculusUserManagement(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usermanagement.oculusUserManagement/register',
            usermanagement__pb2.registraionRequest.SerializeToString,
            usermanagement__pb2.registraionResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usermanagement.oculusUserManagement/getUser',
            usermanagement__pb2.userInfoRequest.SerializeToString,
            usermanagement__pb2.userInfoResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def accountSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usermanagement.oculusUserManagement/accountSettings',
            usermanagement__pb2.settingsRequest.SerializeToString,
            usermanagement__pb2.settingsResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usermanagement.oculusUserManagement/notifications',
            usermanagement__pb2.notificationRequest.SerializeToString,
            usermanagement__pb2.notificationResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
