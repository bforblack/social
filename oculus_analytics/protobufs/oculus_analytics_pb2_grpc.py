# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobufs.oculus_analytics_pb2 as oculus__analytics__pb2


class oculusAnalyticsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.postAnalytics = channel.unary_unary(
                '/oculus_analytics.oculusAnalytics/postAnalytics',
                request_serializer=oculus__analytics__pb2.userPostRequest.SerializeToString,
                response_deserializer=oculus__analytics__pb2.userResponce.FromString,
                )
        self.userAnalytics = channel.unary_unary(
                '/oculus_analytics.oculusAnalytics/userAnalytics',
                request_serializer=oculus__analytics__pb2.userPostRequest.SerializeToString,
                response_deserializer=oculus__analytics__pb2.userResponce.FromString,
                )
        self.trendAnalytics = channel.unary_unary(
                '/oculus_analytics.oculusAnalytics/trendAnalytics',
                request_serializer=oculus__analytics__pb2.userPostRequest.SerializeToString,
                response_deserializer=oculus__analytics__pb2.userResponce.FromString,
                )
        self.socialNetworkAnalytics = channel.unary_unary(
                '/oculus_analytics.oculusAnalytics/socialNetworkAnalytics',
                request_serializer=oculus__analytics__pb2.userPostRequest.SerializeToString,
                response_deserializer=oculus__analytics__pb2.userResponce.FromString,
                )
        self.audienceSegmentation = channel.unary_unary(
                '/oculus_analytics.oculusAnalytics/audienceSegmentation',
                request_serializer=oculus__analytics__pb2.userPostRequest.SerializeToString,
                response_deserializer=oculus__analytics__pb2.userResponce.FromString,
                )


class oculusAnalyticsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def postAnalytics(self, request, context):
        """Choosing default paramameter for all methods, chnage accordingly
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userAnalytics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def trendAnalytics(self, request, context):
        """Change after getting account setttings details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def socialNetworkAnalytics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def audienceSegmentation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_oculusAnalyticsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'postAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.postAnalytics,
                    request_deserializer=oculus__analytics__pb2.userPostRequest.FromString,
                    response_serializer=oculus__analytics__pb2.userResponce.SerializeToString,
            ),
            'userAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.userAnalytics,
                    request_deserializer=oculus__analytics__pb2.userPostRequest.FromString,
                    response_serializer=oculus__analytics__pb2.userResponce.SerializeToString,
            ),
            'trendAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.trendAnalytics,
                    request_deserializer=oculus__analytics__pb2.userPostRequest.FromString,
                    response_serializer=oculus__analytics__pb2.userResponce.SerializeToString,
            ),
            'socialNetworkAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.socialNetworkAnalytics,
                    request_deserializer=oculus__analytics__pb2.userPostRequest.FromString,
                    response_serializer=oculus__analytics__pb2.userResponce.SerializeToString,
            ),
            'audienceSegmentation': grpc.unary_unary_rpc_method_handler(
                    servicer.audienceSegmentation,
                    request_deserializer=oculus__analytics__pb2.userPostRequest.FromString,
                    response_serializer=oculus__analytics__pb2.userResponce.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oculus_analytics.oculusAnalytics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class oculusAnalytics(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def postAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oculus_analytics.oculusAnalytics/postAnalytics',
            oculus__analytics__pb2.userPostRequest.SerializeToString,
            oculus__analytics__pb2.userResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oculus_analytics.oculusAnalytics/userAnalytics',
            oculus__analytics__pb2.userPostRequest.SerializeToString,
            oculus__analytics__pb2.userResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def trendAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oculus_analytics.oculusAnalytics/trendAnalytics',
            oculus__analytics__pb2.userPostRequest.SerializeToString,
            oculus__analytics__pb2.userResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def socialNetworkAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oculus_analytics.oculusAnalytics/socialNetworkAnalytics',
            oculus__analytics__pb2.userPostRequest.SerializeToString,
            oculus__analytics__pb2.userResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def audienceSegmentation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oculus_analytics.oculusAnalytics/audienceSegmentation',
            oculus__analytics__pb2.userPostRequest.SerializeToString,
            oculus__analytics__pb2.userResponce.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
